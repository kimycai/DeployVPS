# BBC iPlayer TV
# Download Subtitles, convert to srt(SubRip) format and apply time offset
# Todo: get the subtitle streamurl before this...
sub download_subtitles {
	my $prog = shift;
	my ( $ua, $file ) = @_;
	my $suburl;
	my $subs;
	
	# Don't redownload subs if the file already exists
	if ( ( -f $file || -f "$prog->{dir}/$prog->{fileprefix}.partial.srt" ) && ! $opt->{overwrite} ) {
		main::logger "INFO: Skipping subtitles download - file already exists: $file\n" if $opt->{verbose};
		return 0;
	}
	# Find subtitles stream
	for ( keys %{$prog->{streams}} ) {
		$suburl = $prog->{streams}->{$_}->{subtitles1}->{streamurl};
		last if $suburl;
	}
	# Return if we have no url
	if (! $suburl) {
		main::logger "INFO: Subtitles not available\n";
		return 2;
	}
	main::logger "INFO: Getting Subtitles from $suburl\n" if $opt->{verbose};
	# Open subs file
	unlink($file);
	open( my $fh, "> $file" );
	# Download subs
	$subs = main::request_url_retry($ua, $suburl, 2);
	if (! $subs ) {
		main::logger "ERROR: Subtitle Download failed\n";
		close $fh;
		unlink($file) if -f $file;
		return 1;
	} else {
		# Dump raw subs into a file if required
		if ( $opt->{subsraw} ) {
			unlink("$prog->{dir}/$prog->{fileprefix}.ttxt");
			main::logger "INFO: 'Downloading Raw Subtitles to $prog->{dir}/$prog->{fileprefix}.ttxt'\n";
			open( my $fhraw, "> $prog->{dir}/$prog->{fileprefix}.ttxt");
			print $fhraw $subs;
			close $fhraw;
		}
		main::logger "INFO: Downloading Subtitles to '$prog->{dir}/$prog->{fileprefix}.srt'\n";
	}
	# Convert the format to srt
	# SRT:
	#1
	#00:01:22,490 --> 00:01:26,494
	#Next round!
	#
	#2
	#00:01:33,710 --> 00:01:37,714
	#Now that we've moved to paradise, there's nothing to eat.
	#
	
	# TT:
	#<p begin="0:01:12.400" end="0:01:13.880">Thinking.</p>
	#<p begin="00:01:01.88" id="p15" end="00:01:04.80"><span tts:color="cyan">You're thinking of Hamburger Hill...<br /></span>Since we left...</p>
	#<p begin="00:00:18.48" id="p0" end="00:00:20.52">APPLAUSE AND CHEERING</p>
	# There is also a multiline form:
	#<p region="speaker" begin="00:00:01.840" end="00:00:08.800"><span style="textStyle">  This programme contains  <br/>
	#                  some strong language</span></p>
	# And a form with explicit namespace:
	#<tt:p xml:id="C80" begin="00:08:45.440" end="00:08:49.240" style="s2">It was in 2000. At the beginning,<tt:br />it was different.</tt:p>
	my @subsfmts = qw/compact default/;
	if ( $opt->{subsfmt} && ! grep /^$opt->{subsfmt}$/i, @subsfmts ) {
		main::logger "WARNING: Invalid value specified for --subsfmt: $opt->{subsfmt}. Must be one of: @subsfmts. Using default subtitles format.\n";
		$opt->{subsfmt} = "default";
	}
	my ($ns) = $subs =~ m{<(\w+:)p\b};
	my $p = $ns.'p';
	my $span = $ns.'span';
	my $br = $ns.'br';
	my $count = 0;
	for ( $subs =~ m{<$p\b.+?</$p>}gis ) {
		my ( $begin, $end, $sub ) = ( m{\bbegin="(.+?)".*?\bend="(.+?)".*?>(.+?)</$p>}is );
		if ( $begin && $end && $sub ) {
			($begin = sprintf( '%02d:%02d:%06.3f', split /:/, $begin )) =~ s/\./,/;
			($end = sprintf( '%02d:%02d:%06.3f', split /:/, $end )) =~ s/\./,/;
			if ($opt->{suboffset}) {
				$begin = main::subtitle_offset( $begin, $opt->{suboffset} );
				$end = main::subtitle_offset( $end, $opt->{suboffset} );
			}
			# remove line breaks, squeeze whitespace, fix up <br> and <span>
			$sub =~ s|\n+||g;
			$sub =~ s/(^\s+|\s+$)//g;
			$sub =~ s|\s+| |g;
			$sub =~ s|(\s?<$br.*?>\s?)+|<br/>|gi;
			$sub =~ s!(^<br/>|<br/>$)!!g;
			$sub =~ s|<br/>(</$span>)$|$1|i;
			$sub =~ s|(<$span.*?>)\s|$1|i;
			# separate individual lines based on <span>s
			$sub =~ s|<$span.*?>(.*?)</$span>|\n$1\n|gi;
			if ($sub =~ m{\n}) {
				# fix up line breaks
				$sub =~ s/(^\n|\n$)//g;
				# add leading hyphens
				$sub =~ s|\n+|\n- |g;
				if ( $sub =~ m{\n-} ) {
					$sub =~ s|^|- |;
				}
			}
			if ( $opt->{subsfmt} eq 'compact' ) {
				$sub =~ s|\n+||g;
				# embed line breaks
				$sub =~ s|<br/>|\n|g;
			} else {
				# remove <br/> elements
				$sub =~ s|\n- <br/>\n|\n|g;
				$sub =~ s|\n- <br/>|\n- |g;
				$sub =~ s|<br/>| |g;
			}
			decode_entities($sub);
			# Write to file
			print $fh ++$count, "\n";
			print $fh "$begin --> $end\n";
			print $fh "$sub\n\n";
		}
	}	
	close $fh;
	if ( ! $count ) {
		main::logger "WARNING: Subtitles empty\n";
		return 3;
	}
	return 0;
}
